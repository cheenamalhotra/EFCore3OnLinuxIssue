// <auto-generated />
using System;
using DemoProject.Database.Tables;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DemoProject.Migrations
{
    [DbContext(typeof(PacketTablesContext))]
    partial class PacketTablesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DemoProject.Database.Tables.LogPacketInWrapper", b =>
                {
                    b.Property<short>("EventYear")
                        .HasColumnName("EventYear")
                        .HasColumnType("smallint");

                    b.Property<string>("EventId")
                        .HasColumnName("EventId")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("MatchId")
                        .HasColumnName("MatchId")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnName("DateTimeIn")
                        .HasColumnType("datetime");

                    b.Property<string>("CourtId")
                        .HasColumnName("courtId")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedAt")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ITFUmpireId")
                        .HasColumnName("ITFUmpireID")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("MatchState")
                        .HasColumnName("mState")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime>("PSOutTimestamp")
                        .HasColumnName("tsSSOUTCStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("PacketDataBase64")
                        .HasColumnName("PacketDataBase64")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("PacketId")
                        .HasColumnName("PacketIdentifier")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("PacketSequenceNumber")
                        .HasColumnName("kSeq")
                        .HasColumnType("int");

                    b.Property<string>("PacketState")
                        .HasColumnName("pState")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("PacketType")
                        .HasColumnName("pType")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ReceivedFrom")
                        .HasColumnName("fromIpPort")
                        .HasColumnType("varchar(22)")
                        .HasMaxLength(22)
                        .IsUnicode(false);

                    b.Property<DateTime>("SDOutTimestamp")
                        .HasColumnName("tsSDOUTCStamp")
                        .HasColumnType("datetime");

                    b.HasKey("EventYear", "EventId", "MatchId", "ReceivedAt");

                    b.ToTable("Log_PacketIn_Wrapper");
                });

            modelBuilder.Entity("DemoProject.Database.Tables.MatchInfo", b =>
                {
                    b.Property<short>("EventYear")
                        .HasColumnType("smallint");

                    b.Property<string>("EventId")
                        .HasColumnName("EventID")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("MatchId")
                        .HasColumnName("MatchID")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("BinPacketBase64")
                        .HasColumnType("varchar(4000)")
                        .HasMaxLength(4000)
                        .IsUnicode(false);

                    b.Property<short?>("CourtId")
                        .HasColumnName("CourtID")
                        .HasColumnType("smallint");

                    b.Property<short?>("DateSeq")
                        .HasColumnType("smallint");

                    b.Property<string>("DrawLevelType")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("DrawMatchType")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("EntryTypeA")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("EntryTypeB")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("EventGender")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<bool?>("ExcludeFlag")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("MatchState")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<DateTime?>("MatchTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("MatchTimeTotal")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Message")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("NumSets")
                        .HasColumnType("smallint");

                    b.Property<string>("PacketKeystrokes")
                        .HasColumnType("varchar(3000)")
                        .HasMaxLength(3000)
                        .IsUnicode(false);

                    b.Property<string>("PlayerCountryA")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("PlayerCountryA2")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("PlayerCountryB")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("PlayerCountryB2")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3)
                        .IsUnicode(false);

                    b.Property<string>("PlayerIDA")
                        .HasColumnName("PlayerIDA")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("PlayerIDA2")
                        .HasColumnName("PlayerIDA2")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("PlayerIDB")
                        .HasColumnName("PlayerIDB")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("PlayerIDB2")
                        .HasColumnName("PlayerIDB2")
                        .HasColumnType("varchar(7)")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("PlayerNameFirstA")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PlayerNameFirstA2")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PlayerNameFirstB")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PlayerNameFirstB2")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("PlayerNameLastA")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PlayerNameLastA2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PlayerNameLastB")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PlayerNameLastB2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PointA")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("PointB")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ResultString")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("RoundId")
                        .HasColumnName("RoundID")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet1A")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet1B")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet2A")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet2B")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet3A")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet3B")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet4A")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet4B")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet5A")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSet5B")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreString")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ScoreSys")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("ScoreTBSet1")
                        .HasColumnName("ScoreTBSet1")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreTBSet2")
                        .HasColumnName("ScoreTBSet2")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreTBSet3")
                        .HasColumnName("ScoreTBSet3")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreTBSet4")
                        .HasColumnName("ScoreTBSet4")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreTBSet5")
                        .HasColumnName("ScoreTBSet5")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("SeedA")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("SeedB")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Serve")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("Winner")
                        .HasColumnType("varchar(1)")
                        .HasMaxLength(1)
                        .IsUnicode(false);

                    b.Property<string>("XmlString")
                        .HasColumnName("xmlstring")
                        .HasColumnType("xml");

                    b.HasKey("EventYear", "EventId", "MatchId");

                    b.ToTable("Match_Info");
                });

            modelBuilder.Entity("DemoProject.Database.Tables.MatchKeystroke", b =>
                {
                    b.Property<int>("EventYear")
                        .HasColumnName("EventYear")
                        .HasColumnType("int");

                    b.Property<string>("EventId")
                        .HasColumnName("EventID")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("MatchId")
                        .HasColumnName("MatchID")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int>("KeystrokeIndex")
                        .HasColumnName("KeystrokeIndex")
                        .HasColumnType("int");

                    b.Property<byte?>("CourtId")
                        .HasColumnName("CourtIdentifier")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("DayNumber")
                        .HasColumnName("DayNumber")
                        .HasColumnType("tinyint");

                    b.Property<int>("GameIndex")
                        .HasColumnName("GameIndex")
                        .HasColumnType("int");

                    b.Property<int>("InvolvedPlayerId")
                        .HasColumnName("InvolvedPlayerID")
                        .HasColumnType("int");

                    b.Property<string>("Json")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("KeystrokeName")
                        .HasColumnName("KeystrokeName")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("LastUpdated")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("MatchState")
                        .HasColumnName("MatchState")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("PacketIdentifier")
                        .HasColumnName("PacketIdentifier")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("SetIndex")
                        .HasColumnName("SetIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimePoint")
                        .HasColumnName("TimePoint")
                        .HasColumnType("datetime");

                    b.HasKey("EventYear", "EventId", "MatchId", "KeystrokeIndex");

                    b.ToTable("Match_Keystrokes");
                });

            modelBuilder.Entity("DemoProject.Database.Tables.MatchSetData", b =>
                {
                    b.Property<short>("EventYear")
                        .HasColumnType("smallint");

                    b.Property<string>("EventId")
                        .HasColumnName("EventID")
                        .HasColumnType("varchar(6)")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("MatchId")
                        .HasColumnName("MatchID")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<short>("SetNum")
                        .HasColumnType("smallint");

                    b.Property<short?>("AcesA")
                        .HasColumnType("smallint");

                    b.Property<short?>("AcesB")
                        .HasColumnType("smallint");

                    b.Property<short?>("AcesSSA")
                        .HasColumnName("AcesSSA")
                        .HasColumnType("smallint");

                    b.Property<short?>("AcesSSB")
                        .HasColumnName("AcesSSB")
                        .HasColumnType("smallint");

                    b.Property<short?>("BreakPtsConvA")
                        .HasColumnType("smallint");

                    b.Property<short?>("BreakPtsConvB")
                        .HasColumnType("smallint");

                    b.Property<short?>("BreakPtsPlayedA")
                        .HasColumnType("smallint");

                    b.Property<short?>("BreakPtsPlayedB")
                        .HasColumnType("smallint");

                    b.Property<short?>("DblFltA")
                        .HasColumnType("smallint");

                    b.Property<short?>("DblFltB")
                        .HasColumnType("smallint");

                    b.Property<short?>("Pts1stServLostA")
                        .HasColumnType("smallint");

                    b.Property<short?>("Pts1stServLostB")
                        .HasColumnType("smallint");

                    b.Property<short?>("PtsPlayed1stServA")
                        .HasColumnType("smallint");

                    b.Property<short?>("PtsPlayed1stServB")
                        .HasColumnType("smallint");

                    b.Property<short?>("PtsTotWonServA")
                        .HasColumnType("smallint");

                    b.Property<short?>("PtsTotWonServB")
                        .HasColumnType("smallint");

                    b.Property<short?>("PtsWon1stServA")
                        .HasColumnType("smallint");

                    b.Property<short?>("PtsWon1stServB")
                        .HasColumnType("smallint");

                    b.Property<string>("ScoreA")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreB")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("ScoreTB")
                        .HasColumnName("ScoreTB")
                        .HasColumnType("varchar(2)")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<short?>("ServGamesPlayedA")
                        .HasColumnType("smallint");

                    b.Property<short?>("ServGamesPlayedB")
                        .HasColumnType("smallint");

                    b.Property<string>("SetTime")
                        .HasColumnType("varchar(8)")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<short?>("TotPtsWonA")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotPtsWonB")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotServPlayedA")
                        .HasColumnType("smallint");

                    b.Property<short?>("TotServPlayedB")
                        .HasColumnType("smallint");

                    b.HasKey("EventYear", "EventId", "MatchId", "SetNum");

                    b.ToTable("Match_SetData");
                });
#pragma warning restore 612, 618
        }
    }
}
